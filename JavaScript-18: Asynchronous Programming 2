// Q1. Async JS Output? MCQ 1
console.log(1); // Output: 1
setTimeout(() => console.log(2), 0); // Asynchronous operation
console.log(3); // Output: 3

// Correct Answer: 1 3 2
// Explanation:
// - console.log(1) prints 1.
// - setTimeout(() => console.log(2), 0) schedules the printing of 2 to happen after the current synchronous code execution completes, so it goes to the event queue.
// - console.log(3) prints 3.
// - Event loop picks up the function from the event queue and prints 2.

// Q2. Async JS Output? MCQ 2
async function getData() { return await Promise.resolve('Hello'); } 
console.log(getData()); // Output: Promise {<pending>}

// Correct Answer: Promise {<pending>}
// Explanation:
// - getData() returns a Promise that resolves with the string 'Hello'.
// - When console.log(getData()) is called, it logs the Promise object itself, which is in a pending state because it hasn't resolved yet.

// Q3. Async JS Output? MCQ 3
async function fetchData() { } 
throw new Error('Error occurred'); 
fetchData().catch((error) => console.log(error.message)); 

// Correct Answer: Error occurred
// Explanation:
// - The fetchData() function doesn't contain any code inside its body.
// - Immediately after the function definition, throw new Error('Error occurred'); throws an error with the message 'Error occurred'.
// - Since there is no code in fetchData(), it immediately returns a Promise that resolves with an undefined value.
// - The catch block attached to the Promise returned by fetchData() catches the thrown error and logs its message, which is 'Error occurred'.

// Q4. Async JS Output? MCQ 4
async function processArray(array) { 
    const results = [];
    for (const item of array) {
        const processedItem = await processItem(item); // Assuming processItem function exists
        results.push(processedItem);
    }
    return results;
}

const data = [1, 2, 3];
console.log(processArray(data)); // Output: Promise {<pending>}

// Correct Answer: Promise {<pending>}
// Explanation:
// - processArray is an asynchronous function and contains await, it returns a Promise that is pending until all the items in the data array are processed.

// Q5. Async JS Output? MCQ 5
function fetchData() { 
    return new Promise((resolve) => {
        setTimeout(() => resolve('Data'), 1000);
    });
}

async function logData() { 
    const result = await fetchData(); 
    console.log(result); 
}

logData(); 
console.log('End');

// Correct Answer: 
// End
// Data
// Explanation:
// - console.log('End') is executed first because it's synchronous.
// - Then, logData() is called, which starts the asynchronous operation.
// - After one second (setTimeout delay), the result of fetchData() is logged, which is 'Data'.
